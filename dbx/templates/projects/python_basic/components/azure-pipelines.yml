variables:
- group: Databricks-environment

trigger:
  batch: true
  branches:
    include:
    - '*'

  tags:
    include:
      - v*.*
      - prod

stages:
- stage: onPush
  jobs:
  - job: onPushJob
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.7'
      inputs:
        versionSpec: 3.7

    - checkout: self
      persistCredentials: true
      clean: true
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

    - script: |
        python -m pip install --upgrade pip
        python -m pip install -e ".[dev]"
      displayName: 'Install dependencies'

    - script: |
        python -m pytest tests/unit --junitxml=test-unit.xml
      displayName: 'Run Unit tests'

    - script: |
        python -m dbx deploy --job={{project_name}}-sample-etl-2.0 --files-only
      displayName: 'Deploy integration test'

    - script: |
        python -m dbx launch --job={{project_name}}-sample-etl-2.0 --as-run-submit --trace
      displayName: 'Launch integration on test'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-*.xml'
        failTaskOnFailedTests: true

- stage: onRelease
  condition: |
    or(
      startsWith(variables['Build.SourceBranch'], 'refs/heads/releases'),
      startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
    )
  jobs:
  - job: onReleaseJob
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
      - script: env | sort
        displayName: 'Environment / Context'

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.7'
        inputs:
          versionSpec: 3.7

      - checkout: self
        persistCredentials: true
        clean: true
        displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

      - script: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[dev]"
        displayName: 'Install dependencies'

      - script: |
          python -m pytest tests/unit --junitxml=test-unit.xml
        displayName: 'Run Unit tests'

      - script: |
          python -m dbx deploy --job={{project_name}}-sample-etl-2.0
        displayName: 'Deploy the job'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/test-*.xml'
          failTaskOnFailedTests: true
